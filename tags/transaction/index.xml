<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Transaction - Tag - 👨‍💻꿈꾸는 태태태의 공간</title><link>https://taetaetae.github.io/tags/transaction/</link><description>Transaction - Tag - 👨‍💻꿈꾸는 태태태의 공간</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 08 Jan 2017 17:19:30 +0000</lastBuildDate><atom:link href="https://taetaetae.github.io/tags/transaction/" rel="self" type="application/rss+xml"/><item><title>Spring Transactional 설정 및 주요속성</title><link>https://taetaetae.github.io/2017/01/08/transactional-setting-and-property/</link><pubDate>Sun, 08 Jan 2017 17:19:30 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/01/08/transactional-setting-and-property/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/transactional-setting-and-property/transactional.png" referrerpolicy="no-referrer">
            </div>지난번에는 트랜잭션의 설정값에 대해 알아본 바 있다. [ Spring Transaction 옵션 ] 이번 포스팅에서는 실제로 스프링 환경에서 어떤식으로 설정해야 @Transactional 어노테이션을 사용할수 있는지, 그리고 어떤 속성들이 있는지에 대해 알아보고자 한다.설정 기존 xml방식에서는 다음과 같이 설정을 한다.
&lt;bean id=&#34;transactionManager&#34; class=&#34;org.springframework.jdbc.datasource.DataSourceTransactionManager&#34;&gt; &lt;property name=&#34;dataSource&#34; ref=&#34;dataSource&#34;/&gt; &lt;/bean&gt; &lt;tx:annotation-driven transaction-manager=&#34;transactionManager&#34; proxy-target-class=&#34;true&#34;/&gt; 혹, JavaConfig 방식으로 설정하기 위해서는 다음과 같이 설정한다.
@EnableTransactionManagement public class AppConfig { ... @Bean public PlatformTransactionManager transactionManager() throws URISyntaxException, GeneralSecurityException, ParseException, IOException { return new DataSourceTransactionManager(dataSource()); } } 위와같이 설정을 해주면 트랜잭션을 설정하고자 하는 곳 어디서든 @Transactional 어노테이션을 지정해서 적용이 가능하다.]]></description></item><item><title>Spring Transaction 옵션</title><link>https://taetaetae.github.io/2016/10/08/20161008/</link><pubDate>Sat, 08 Oct 2016 18:04:19 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2016/10/08/20161008/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/20161008/spring.png" referrerpolicy="no-referrer">
            </div>상황 스프링 환경에서 일반적으로 DAO 나 BO 레벨에서 다음과 같이 코딩을 하게 된다.
@Transactional(isolation = Isolation.READ_COMMITTED, propagation = Propagation.REQUIRED, rollbackFor = Exception.class) public int method(int i) throws Exception { return sqlMapClient.delete(&#34;~~~~&#34;); } 무분별하게 Ctrl+C,V 신공으로 트랜잭션 어노테이션을 가져다가 사용할수도 있겠으나, 각 값들이 어떤 역활을 아는지에 대해 알고 넘어갈 필요성이 있다.
@Transactional 우선 해당 어노테이션을 적용하면 적용된 클래스 또는 메소드에 트랜잭션이 적용된다. 따라서 로직 흐름에 맞추어 전체적으로 트랜잭션을 적용할것인지, 아니면 특정 메소드에 적용할것인지 전략을 잘 세워야 한다.]]></description></item></channel></rss>