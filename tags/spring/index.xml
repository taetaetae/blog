<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>spring - Tag - 👨‍💻꿈꾸는 태태태의 공간</title><link>https://taetaetae.github.io/tags/spring/</link><description>spring - Tag - 👨‍💻꿈꾸는 태태태의 공간</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 29 Sep 2019 17:55:50 +0000</lastBuildDate><atom:link href="https://taetaetae.github.io/tags/spring/" rel="self" type="application/rss+xml"/><item><title>우아한 스프링 배치 테크세미나 정리 및 후기 (by 우아한 형제들)</title><link>https://taetaetae.github.io/2019/09/29/woowabros-spring-batch/</link><pubDate>Sun, 29 Sep 2019 17:55:50 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2019/09/29/woowabros-spring-batch/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/woowabros-spring-batch/woo.jpeg" referrerpolicy="no-referrer">
            </div>지난주 우아한 형제들에서 진행하였던 &ldquo;9월 우아한 테크 세미나 - 우아한 스프링 배치&rdquo; 에 다녀왔다. 필자에게 이번 9월은 정신이 어디에 있는지 모를만큼 바쁘고 힘들었지만 예전부터 궁금하기도 했고 요즘들어 관심을 갖던 &ldquo;배치 어플리케이션&quot;을 어떻게 하면 &ldquo;우아한 방법&quot;으로 사용할 수 있을지에 대해 여러 생각들이 있었기에 큰 기대를 가지고 지옥철을 견디며 잠실 근처에 있는 우아한 형제들 작은집으로 가게 되었다. 어떤 내용을 발표하였는지에 대해 기억잘하는 똑똑한 앵무새가 되어 정리하기 보다 주요 포인트에 대한 생각과 함께 참여를 못한 분들 위해서라기 보다 내 스스로 정리를 하기 위해 포스팅을 작성해 보고자 한다.]]></description></item><item><title>스프링을 활용한 대용량 파일 업로드 구현</title><link>https://taetaetae.github.io/2019/07/21/spring-file-upload/</link><pubDate>Sun, 21 Jul 2019 22:09:58 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2019/07/21/spring-file-upload/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/spring-file-upload/upload.png" referrerpolicy="no-referrer">
&lt;/div>개발을 하다보면 실제로 직접 구현을 해본적은 없지만 여기저기서 들어본 지식과 그 동안의 짬밥(?)으로 추측해볼수 있는 부분들이 있다. 물론 모든일에 정답은 없겠지만 요즘 느끼는건 책에서 공부만 해본것과 다른 블로그들에서 눈으로만 보고 넘어가는것들 그리고 직접 손가락을 움직여가며 왜 여기서는 이 방법을 사용하지 고민하면서 구현을 해본다는건 정말 엄청나게 큰 차이가 있는것 같다. 웹 어플리케이션을 개발하다보면 한번 쯤 만나게 되는 파일 업로드 기능. 필자도 몇번 구현은 해봤지만 그냥 단순히 구현만 해본 상태였다가 최근에 그냥 파일 업로드가 아닌 대용량 파일 업로드에서의 문제가 발생하여 여기저기 삽질을 하게 되었고 정리도 해볼겸 스프링에서의 대용량 파일 업로드시 한번쯤 고려해봐야 할 부분에 대해 정리를 해보려고 한다.</description></item><item><title>Spring에서 Request를 우아하게 로깅하기</title><link>https://taetaetae.github.io/2019/06/30/controller-common-logging/</link><pubDate>Sun, 30 Jun 2019 18:39:47 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2019/06/30/controller-common-logging/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/controller-common-logging/spring_boot_logging.png" referrerpolicy="no-referrer">
            </div>스프링 기반의 웹 어플리케이션을 만들다 보면 요청을 처리하는데 맨 처음에 위치하고 있는 Controller(이하 컨트롤러)라는 레이어를 만들게 된다. 그럴때면 사용자가 어떤 요청(Request)을 하였는지에 대해 확인이 필요할 수 있다. 물론 확인을 안해도 무방하지만 가급적 로깅은 시스템 로직에 영향을 주지 않는 범위에서 최대한 다양하게 미리 해두는게 나중에 유지보수시 편할 수 있다. (예전 조직장님께서 말씀하신게 아직도 머릿속에 꽉 자리잡고 있다&hellip;) 아~주 일반적으로, 컨트롤러에서는 다음과 같이 메소드 단위로 파라미터를 직접 로깅하게 된다.
@Slf4j @RestController public class SampleController { @GetMapping(&#34;/test1&#34;) public String test1(@RequestParam String id) { log.]]></description></item><item><title>Spring MVC Redirect 처리중에 발생한 Out Of Memory 원인 분석하기</title><link>https://taetaetae.github.io/2019/01/10/spring-redirect-oom/</link><pubDate>Thu, 10 Jan 2019 18:39:47 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2019/01/10/spring-redirect-oom/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/spring-redirect-oom/test1-pinpoint.jpg" referrerpolicy="no-referrer">
            </div>초창기 신입시절에 배우거나 사용했던 기술적인 방법들이 있다. 시간이 지날수록 왠만해선 다른방법은 사용하지 않으려 하고 습관처럼 기존에 사용했던 방법을 고수하는 버릇이 있다. 그 이유는 과거에 사용했을때 아무 탈 없이 잘 되었기 때문에, 그리고 빠른 구현 때문이라는 핑계일 것 같다. 이러한 버릇은 비단 이 글을 적고있는 필자 뿐만이 아니라 대부분의 개발자들이 가지고 있을꺼라 조심스레 추측해본다. (아니라면&hellip;더욱 분발 해야겠다&hellip;ㅠ) 최근 운영하고 있는 서비스에서 장애 상황까지 갈수있는 위험한 상황이 있었는데 팀내 코드리뷰를 통해 문제점을 파악할 수 있었다.]]></description></item><item><title>스프링환경에서의 파라미터 관련 정리</title><link>https://taetaetae.github.io/2017/03/12/spring-parameter/</link><pubDate>Sun, 12 Mar 2017 18:03:01 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/03/12/spring-parameter/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/spring-parameter/spring-parameter-1.jpg" referrerpolicy="no-referrer">
            </div>일반적인 웹 프로젝트 구성에서는 Controller레벨에서 응답을 받고 비지니스 로직을 처리 후에 다시 View레벨로 넘어가는게 통상적인 흐름이다. 이 부분에서 파라미터 관련한 여러가지 부분에 대해 정리해보고자 한다.
httpServletRequest.getParameter() 아래소스처럼 HttpServletRequest의 getParameter() 메서드를 이용하여 파라미터값을 가져올 수 있다.
@RequestMapping(&#34;/&#34;) public String home(HttpServletRequest httpServletRequest) { String id = httpServletRequest.getParameter(&#34;id&#34;); return &#34;home&#34;; } @RequestParam 또다른 방법으로는 @RequestParam 어노테이션을 이용하면 간단하게 파라미터값을 가져올수 있다. 우선, 해당 어노테이션의 옵션값들에 대해 간략하게 확인하고 넘어가는게 좋을듯 싶다. API문서 4.3.6 기준]]></description></item><item><title>Spring Transactional 설정 및 주요속성</title><link>https://taetaetae.github.io/2017/01/08/transactional-setting-and-property/</link><pubDate>Sun, 08 Jan 2017 17:19:30 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/01/08/transactional-setting-and-property/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/transactional-setting-and-property/transactional.png" referrerpolicy="no-referrer">
            </div>지난번에는 트랜잭션의 설정값에 대해 알아본 바 있다. [ Spring Transaction 옵션 ] 이번 포스팅에서는 실제로 스프링 환경에서 어떤식으로 설정해야 @Transactional 어노테이션을 사용할수 있는지, 그리고 어떤 속성들이 있는지에 대해 알아보고자 한다.설정 기존 xml방식에서는 다음과 같이 설정을 한다.
&lt;bean id=&#34;transactionManager&#34; class=&#34;org.springframework.jdbc.datasource.DataSourceTransactionManager&#34;&gt; &lt;property name=&#34;dataSource&#34; ref=&#34;dataSource&#34;/&gt; &lt;/bean&gt; &lt;tx:annotation-driven transaction-manager=&#34;transactionManager&#34; proxy-target-class=&#34;true&#34;/&gt; 혹, JavaConfig 방식으로 설정하기 위해서는 다음과 같이 설정한다.
@EnableTransactionManagement public class AppConfig { ... @Bean public PlatformTransactionManager transactionManager() throws URISyntaxException, GeneralSecurityException, ParseException, IOException { return new DataSourceTransactionManager(dataSource()); } } 위와같이 설정을 해주면 트랜잭션을 설정하고자 하는 곳 어디서든 @Transactional 어노테이션을 지정해서 적용이 가능하다.]]></description></item><item><title>spring4에서 json view 활용하기(with @ResponseBody)</title><link>https://taetaetae.github.io/2017/01/07/spring4-json/</link><pubDate>Sat, 07 Jan 2017 15:47:59 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/01/07/spring4-json/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/spring4-json/json.png" referrerpolicy="no-referrer">
            </div>수많은 블로거분들의 도움을 받고자 구글링을 해서 적용을 해봤지만 너무많은 삽질을 했다.(해봤던 방식은 jsonViewResolver 를 따로 설정해보거나, @RequestMapping 옵션을 바꿔보는 수준..) 특히나 Spring설정방식이 예전 방식이였던 xml이 아닌 javaconfig였기 때문에 더욱더 자료가 없었고.. 한참을 삽질하다 해결을 하여 포스팅하게 된다. 우선 환경은 spring 4.3.4.RELEASE, Maven, jdk8임을 밝힌다.
pom.xml jackson-mapper-asl을 이용해서 하라는 블로거들도 있었지만, 아무리해도(뭔가 Spring버전과 맞지 않는듯 했다.) 잘 안되어 아래와 같은 dependency를 주었다.
&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.5.1&lt;/version&gt; &lt;/dependency&gt; Controller 아래와같이 @ResponseBody 어노테이션을 설정해주고 리턴은 해당 모델을 넘기면 된다.]]></description></item></channel></rss>