<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>heap dump - Tag - 👨‍💻꿈꾸는 태태태의 공간</title><link>https://taetaetae.github.io/tags/heap-dump/</link><description>heap dump - Tag - 👨‍💻꿈꾸는 태태태의 공간</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 10 Jan 2019 18:39:47 +0000</lastBuildDate><atom:link href="https://taetaetae.github.io/tags/heap-dump/" rel="self" type="application/rss+xml"/><item><title>Spring MVC Redirect 처리중에 발생한 Out Of Memory 원인 분석하기</title><link>https://taetaetae.github.io/2019/01/10/spring-redirect-oom/</link><pubDate>Thu, 10 Jan 2019 18:39:47 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2019/01/10/spring-redirect-oom/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/spring-redirect-oom/test1-pinpoint.jpg" referrerpolicy="no-referrer">
            </div>초창기 신입시절에 배우거나 사용했던 기술적인 방법들이 있다. 시간이 지날수록 왠만해선 다른방법은 사용하지 않으려 하고 습관처럼 기존에 사용했던 방법을 고수하는 버릇이 있다. 그 이유는 과거에 사용했을때 아무 탈 없이 잘 되었기 때문에, 그리고 빠른 구현 때문이라는 핑계일 것 같다. 이러한 버릇은 비단 이 글을 적고있는 필자 뿐만이 아니라 대부분의 개발자들이 가지고 있을꺼라 조심스레 추측해본다. (아니라면&hellip;더욱 분발 해야겠다&hellip;ㅠ) 최근 운영하고 있는 서비스에서 장애 상황까지 갈수있는 위험한 상황이 있었는데 팀내 코드리뷰를 통해 문제점을 파악할 수 있었다. 그 원인은 Spring MVC Controller 레벨에서 redirect 처리를 할때 return값의 Cardinality가 높을경우 다음과 같이 사용하면 안된다고&hellip;
@RequestMapping(value = &#34;/test&#34;, method = RequestMethod.GET) public String test() { String url = &#34;어떠한 로직에 의해 생성되는 url&#34;; return &#34;redirect:&#34; + url; // &lt;- 위험 포인트! } 이 코드가 왜? 어디가 어때서? 이제까지 Controller 레벨에서 redirect 처리를 할때 아무생각없이 위에 있는 코드 형태로 구현을 했는데 저러한 코드 때문에 OOM이 발생하여 fullGC 가 여러번 발생하고, 일시적으로 서비스가 지연되는 현상이 발생했다고 한다. 자주 사용하던 방법이였는데 장애를 유발할수 있는 위험한 방법이였다니&hellip; 이번 포스팅에서는 이러한 방법이 왜 잘못되었는지 실제로 테스트를 통해 몸소(?) 체감을 해보고, 그럼 어떤 방법으로 redirect 처리를 해야 하는가와 개선을 함으로써 기존방식에 비해 어떤점이 좋아졌는지에 대해서 정리해보고자 한다.
 뭔가 내것으로 만들기 시리즈물이 나올것만 같은 느낌이다&hellip;
 기존방식의 문제점 재현 및 다양한 원인분석 기존방식으로 했을때 왜 OOM이 발생했을까? 우리는 개발자이기 때문에 이런저런 글들만 보고 추측 할것이 아니라 직접 재현을 해보고 다양한 시각에서 원인분석을 해보자. 먼저 기본적인 Spring MVC 뼈대를 만들고 redirect 하는 return 값의 Cardinality가 높도록 random string 을 만들어 주도록 한다. 즉, /random을 호출하면 /result/ETmHfowFkU처럼 random string 이 만들어 지며 redirect 처리가 되는 매우 심플한 구조이다.
// Spring 버전은 4.0.6.RELEASE @Controller @RequestMapping(&#34;/&#34;) public class TestController { @RequestMapping(value = &#34;random&#34;, method = RequestMethod.GET) public String random() { return &#34;redirect:result/&#34; + UUID.randomUUID(); } @RequestMapping(value = &#34;result/{message}&#34;, method = RequestMethod.GET) public String result(ModelMap model, @PathVariable String message) { model.addAttribute(&#34;message&#34;, message); return &#34;result&#34;; } } 또한 해당 프로젝트에서는 AOP를 사용하고 있었기 때문에 그때와 동일한 상황으로 재현을 하기 위해 AOP관련 설정도 추가해준다.
@Configuration @EnableWebMvc @EnableAspectJAutoProxy @ComponentScan public class HelloWorldConfiguration { @Bean(name=&#34;HelloWorld&#34;) public ViewResolver viewResolver() { InternalResourceViewResolver viewResolver = new InternalResourceViewResolver(); viewResolver.setViewClass(JstlView.class); viewResolver.setPrefix(&#34;/WEB-INF/views/&#34;); viewResolver.setSuffix(&#34;.jsp&#34;); return viewResolver; } } 이렇게 한뒤 tomcat으로 최대/최소 메모리를 256m으로 설정후 해당 모듈을 띄워준다. 그다음 메모리 상태를 보기 위해 tomcat에 pinpoint를 연동하고 마지막으로 호출테스트를 위해 nGrinder을 설정해준다. 특별한 설정은 없고 위 컨트롤러의 url (/random) 을 여러번 호출하도록 하였다. nGrinder을 설정하는대에는 이 블로그 포스팅을 참고해서 설정하였다.
자, 이제 테스트를 시작해보자. (마치 수술 집도하는것 같은 기분으로&hellip;간호사~ 칼!)
 nGrinder nGrinder의 기본 스크립트에서 url만 해당 서버로 호출되도록 바꿔주고 총 가상 사용자는 2,000으로 시간은 5분으로 설정후에 테스트 시작을 하였더니 다음과 같은 그래프를 볼수 있었다.   TPS가 불안정해지다가 어느시점부터 낮아지는것을 확인할 수 있다. 이게 서비스 였다면 사용자가 접속하는데 불편을 느꼈을꺼라 추측을 해본다. 또한 아주 간단한 random string 을 리턴하는 페이지 임에도 불구하고 에러 응답이 적지 않은것을 확인할 수 있었다.
pinpoint 메모리 상태는 어떤지 확인하기 위해 pinpoint를 확인해보면 다음과 같은 그래프를 볼수 있었다.   보기만해도 심장이 벌렁벌렁(?) 뛸 정도로 무서운 그림이다. 실제로 서비스에 (이정도까진 아니였지만) 비슷한 상황이 발생했었다. 메모리가 테스트를 점점 하면 할수록 올라가다가 fullGC가 발생하더니 대나무 숲에 있는 대나무마냥 fullGC가 빼곡히 발생하였다. (이러니&hellip; 페이지 접근에 지연이 생긴것 같다.]]></description></item></channel></rss>