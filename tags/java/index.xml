<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>java - Tag - 👨‍💻꿈꾸는 태태태의 공간</title><link>https://taetaetae.github.io/tags/java/</link><description>java - Tag - 👨‍💻꿈꾸는 태태태의 공간</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 12 May 2019 20:04:01 +0000</lastBuildDate><atom:link href="https://taetaetae.github.io/tags/java/" rel="self" type="application/rss+xml"/><item><title>자바, 성능, 모니터링 테크세미나 정리 및 후기 (by 우아한 형제들)</title><link>https://taetaetae.github.io/2019/05/12/got-of-java-seminar/</link><pubDate>Sun, 12 May 2019 20:04:01 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2019/05/12/got-of-java-seminar/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/got-of-java-seminar/woo.jpeg" referrerpolicy="no-referrer">
&lt;/div>실무에서 자바 기반으로 개발을 하고 서비스를 운영을 하다보면 처음엔 아무런 문제가 없다가 사용자가 몰리는 등 이벤트성으로 트래픽이 많아질 경우 꼭 문제가 생기기 마련이다. 그럴때면 뒤늦게 부랴부랴 원인을 찾고 개선하기 바빠지게 된다. (아마 윗분들에게 혼나면서?ㅠㅠ) 평소에 이런 성능문제를 개선하고 미리 모니터링 할수있는 부분에 대해 관심을 갖고 있었던 찰나, 우아한 형제들에서 5월 우아한 테크 세미나를 한다기에 부랴부랴 장문의 글로 신청을 하였고 운이 좋아 당첨이 되었다. 한창 회사에서 새로운 서비스 출시, 그리고 잠을 줄여가며 별도로 진행하고 있던 토이프로젝트 등 여러가지로 바쁜 시기였지만 특히 예전부터 뵙고싶던 이상민님께서 직접 강의를 해주신다기에 피곤한 심신을 이끌고 세미나에 참석하였고 그 후기를 적어보고자 한다.</description></item><item><title>lombok(롬복)소개 및 설치</title><link>https://taetaetae.github.io/2017/02/22/lombok/</link><pubDate>Wed, 22 Feb 2017 17:48:42 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/02/22/lombok/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/lombok/lombok.png" referrerpolicy="no-referrer">
            </div>일반적으로 자바개발을 하다보면 Model 을 만들고 각 멤버변수를 접근할수 있는 (각 요소들이 private 접근권한을 가지고 있을때) method 를 만들게 된다. IDE에서 제공하는 아래처럼&hellip; (윈도우/이클립스 기준) get/set 메소드 : Alt + Shift + S + R toString 메소드 : Alt + Shift + S + S 기타 등등&hellip;  public class Student { private int id; private String name; private int grade; private String department; public int getId() { return id; } public void setId(int id) { this.]]></description></item><item><title>logback 설정하기</title><link>https://taetaetae.github.io/2017/02/19/logback/</link><pubDate>Sun, 19 Feb 2017 15:10:45 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/02/19/logback/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/logback/logback.jpg" referrerpolicy="no-referrer">
            </div>자바 개발자라면 한번쯤은 들어봤고, 한번쯤은 사용했을법한 logger 로 log4j가 있을것이다. 하지만 최근들어 logback이라는것을 알게되었고, 왜 logback을 사용해야 하는 이유라는 글이 있을정도로 여러 측면에서 개선이 된듯 하다. (링크) 이번에 작성할 글의 목적은 logback을 설정하고 어떻게 사용하는지에 대해 작성해 보고자 한다. ※ 공식사이트 : https://logback.qos.ch/
pom.xml maven구조라고 가정했을때 logback Dependency를 가져오기 위해서는 아래와 같이 pom.xml 에 설정해 주면 된다.
&lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.1.7&lt;/version&gt; &lt;!--버전은 상황에 따라 --&gt; &lt;/dependency&gt; 로그레벨 ERROR, WARN, INFO, DEBUG or TRACE]]></description></item><item><title>자바 8 Date</title><link>https://taetaetae.github.io/2017/01/10/java8-date/</link><pubDate>Tue, 10 Jan 2017 20:55:33 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/01/10/java8-date/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/java8-date/java_date.png" referrerpolicy="no-referrer">
            </div>이제까지 내 기억으로는 Date 관련 클래스를 아래처럼 점차 바꿔써온걸로 기억이 난다. java.util.Date &gt; java.util.Calendar &gt; org.joda.time 그런데 java 8 버전에서 기존에 있었던 문제들을 개선해서 나왔다고 한다. (네이버 HellowWorld 포스팅 참고) JSR-310 이라는 표준명세로.
지금부터는 JAVA 8 에서 제공하는 API로 날짜 연산을 어떻게 하는지에 대해 알아보고자 한다. (물론 수많은 날짜 연산 방법을이 있지만 자주 쓰이는 부분들 위주로 정리해보자.)
 Date &gt; String (format)  LocalDateTime.now().format(DateTimeFormatter.ofPattern(&#34;yyyy-MM-dd&#34;));  String &gt; Date (format)  LocalDateTime.]]></description></item></channel></rss>