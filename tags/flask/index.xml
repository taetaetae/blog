<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>flask - Tag - 👨‍💻꿈꾸는 태태태의 공간</title><link>https://taetaetae.github.io/tags/flask/</link><description>flask - Tag - 👨‍💻꿈꾸는 태태태의 공간</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 05 Aug 2018 10:27:21 +0000</lastBuildDate><atom:link href="https://taetaetae.github.io/tags/flask/" rel="self" type="application/rss+xml"/><item><title>기술블로그 구독서비스 개발 후기 - 1부</title><link>https://taetaetae.github.io/2018/08/05/daily-dev-blog-1/</link><pubDate>Sun, 05 Aug 2018 10:27:21 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2018/08/05/daily-dev-blog-1/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/daily-dev-blog-1/ddb-thumnail.png" referrerpolicy="no-referrer">
&lt;/div>이번 포스팅은 약간의 자투리 시간을 활용하여 이것저것 만져보다 만들게 된 Daily DevBlog(기술블로그 구독서비스)에 대해 이야기 하려고 한다. 하나의 글에 관련 내용을 모두 담기에는 양이 많아서 읽는사람도 지루하고, 글을 쓰는 필자 또한 어불성설 할것같아 크게 3개의 시리즈로 나눠서 최대한 자세하고 현장감(?)있게 글을 써보려고 노력했다.
1부 : 왜 만들게 되었는가 그리고 어떤 구조로 만들었는가 2부 : 문제발생 및 Trouble Shooting 3부 : 앞으로의 계획과 방향성 글에 들어가기 앞서 최종 결과는 http://daily-devblog.</description></item><item><title>초간단 API서버 만들기 - 2부 (Python + Flask + Nginx)</title><link>https://taetaetae.github.io/2018/07/01/simple-web-server-flask-nginx/</link><pubDate>Sun, 01 Jul 2018 02:00:00 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2018/07/01/simple-web-server-flask-nginx/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/simple-web-server-flask-nginx/flask-apache-nginx.png" referrerpolicy="no-referrer">
&lt;/div>지난포스팅에 이어 이번엔 Flask와 Nginx를 연동하는 방법을 정리해보고자 한다. Apache로 연동했는데 왜 또 Nginx로 연동하는걸 정리하지(?)하며 의문이 들수 있는데 다른 포스팅을 봐도 Apache + Flask 조합보다 Nginx + Flask 조합이 더 많고 지난 포스팅에서도 알수있었듯이 (Apache VS Nginx) 둘중 어느것이 좋다고 할수도 없고 각 상황에서 연동하는 방법을 알고 있다면 이 또한 나만의 무기가 될것같아 Nginx를 연동하는 방법을 정리해보려 한다.
1부에서 왜 Flask인가, Flask의 장점에 대해 정리를 했으니 이번 포스팅에서는 별도로 작성하진 않는다.</description></item><item><title>초간단 API서버 만들기 - 1부 (Python + Flask + Apache)</title><link>https://taetaetae.github.io/2018/06/29/simple-web-server-flask-apache/</link><pubDate>Fri, 29 Jun 2018 23:00:00 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2018/06/29/simple-web-server-flask-apache/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/simple-web-server-flask-apache/flask-apache-python.png" referrerpolicy="no-referrer">
            </div>Static한 HTML이 아닌 로직이 필요한 API서버를 구성한다고 가정해보자. (이제까지 지식으로)처음 머릿속에 떠오르는건 Java를 사용하고 스프링으로 어플리케이션을 만들고 apache에 tomcat을 연동한 다음 &hellip;이러한 방법으로 API서버를 구성할수 있겠지만 프로토타이핑 또는 테스트 목적으로 만들기 위해서는 설정하는 시간이 은근 많이 소요된다. (물론 Java Config, Spring Boot 등 간소해졌지만&hellip;) 얼마전부터 Python에 대한 매력을 뼈저리게 느끼고 있다보니 Python으로 API서버를 구성할순 없을까 알아봤고 (모바일 게임 듀랑고 서버가 python이라고 하기도 하고&hellip;) Flask와 Django가 있어서 둘다 써본 결과 필자는 Flask가 맞겠다고 생각해서 정리를 해볼까 한다.]]></description></item></channel></rss>