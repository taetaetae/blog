<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>logback - Tag - 👨‍💻꿈꾸는 태태태의 공간</title><link>https://taetaetae.github.io/tags/logback/</link><description>logback - Tag - 👨‍💻꿈꾸는 태태태의 공간</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 19 Feb 2017 15:10:45 +0000</lastBuildDate><atom:link href="https://taetaetae.github.io/tags/logback/" rel="self" type="application/rss+xml"/><item><title>logback 설정하기</title><link>https://taetaetae.github.io/2017/02/19/logback/</link><pubDate>Sun, 19 Feb 2017 15:10:45 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/02/19/logback/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/logback/logback.jpg" referrerpolicy="no-referrer">
            </div>자바 개발자라면 한번쯤은 들어봤고, 한번쯤은 사용했을법한 logger 로 log4j가 있을것이다. 하지만 최근들어 logback이라는것을 알게되었고, 왜 logback을 사용해야 하는 이유라는 글이 있을정도로 여러 측면에서 개선이 된듯 하다. (링크) 이번에 작성할 글의 목적은 logback을 설정하고 어떻게 사용하는지에 대해 작성해 보고자 한다. ※ 공식사이트 : https://logback.qos.ch/
pom.xml maven구조라고 가정했을때 logback Dependency를 가져오기 위해서는 아래와 같이 pom.xml 에 설정해 주면 된다.
&lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.1.7&lt;/version&gt; &lt;!--버전은 상황에 따라 --&gt; &lt;/dependency&gt; 로그레벨 ERROR, WARN, INFO, DEBUG or TRACE
# logback 설정파일 일반적으로 logback.xml 이라는 이름으로 만들어 src/main/resources/아래에 위치하게 된다. Spring-Boot 환경에서는 logback-spring.xml 이라는 이름으로 설정해야 하는데 logback.xml로 설정하면 스프링부트가 설정하기 전에 로그백 관련한 설정을 하기 때문에 제어할 수가 없게 된다. ( 공식사이트 메뉴얼 : https://logback.qos.ch/documentation.html )
&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt; &lt;configuration&gt; &lt;include resource=&#34;org/springframework/boot/logging/logback/defaults.xml&#34; /&gt; &lt;include resource=&#34;org/springframework/boot/logging/logback/console-appender.xml&#34; /&gt; &lt;!-- 변수 지정 --&gt; &lt;property name=&#34;LOG_DIR&#34; value=&#34;/logs&#34; /&gt; &lt;property name=&#34;LOG_PATH_NAME&#34; value=&#34;${LOG_DIR}/data.log&#34; /&gt; &lt;!-- FILE Appender --&gt; &lt;appender name=&#34;FILE&#34; class=&#34;ch.qos.logback.core.rolling.RollingFileAppender&#34;&gt; &lt;file&gt;${LOG_PATH_NAME}&lt;/file&gt; &lt;!-- 일자별로 로그파일 적용하기 --&gt; &lt;rollingPolicy class=&#34;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&#34;&gt; &lt;fileNamePattern&gt;${LOG_PATH_NAME}.%d{yyyyMMdd}&lt;/fileNamePattern&gt; &lt;maxHistory&gt;60&lt;/maxHistory&gt; &lt;!-- 일자별 백업파일의 보관기간 --&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss} [%-5p] [%F]%M\(%L\) : %m%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;appender name=&#34;STDOUT&#34; class=&#34;ch.qos.logback.core.ConsoleAppender&#34;&gt; &lt;layout class=&#34;ch.qos.logback.classic.PatternLayout&#34;&gt; &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss} [%-5p] [%F]%M\(%L\) : %m%n&lt;/pattern&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;!-- TRACE &gt; DEBUG &gt; INFO &gt; WARN &gt; ERROR, 대소문자 구분 안함 --&gt; &lt;!-- profile 을 읽어서 appender 을 설정할수 있다.(phase별 파일을 안만들어도 되는 좋은 기능) --&gt; &lt;springProfile name=&#34;local&#34;&gt; &lt;root level=&#34;DEBUG&#34;&gt; &lt;appender-ref ref=&#34;FILE&#34; /&gt; &lt;appender-ref ref=&#34;STDOUT&#34; /&gt; &lt;/root&gt; &lt;/springProfile&gt; &lt;springProfile name=&#34;real&#34;&gt; &lt;root level=&#34;INFO&#34;&gt; &lt;appender-ref ref=&#34;FILE&#34; /&gt; &lt;appender-ref ref=&#34;STDOUT&#34; /&gt; &lt;/root&gt; &lt;/springProfile&gt; &lt;/configuration&gt; java 코딩에서의 로깅 실제 사용은 다음과 같이 LoggerFactory를 이용해서 사용하거나 Lombok어노테이션을 활용하면 심플하게 사용이 가능하다.
 LoggerFactory 사용  import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class Foo { static final Logger logger = LoggerFactory.getLogger(Foo.class); public void test() { logger.debug(&#34;ID : {}&#34;, &#34;foo&#34;); } }  Lombok 어노테이션 사용  import lombok.extern.slf4j.Slf4j; @Slf4j public class Foo { public void test() { log.debug(&#34;ID : {}&#34;, &#34;foo&#34;); } } 마치며 일반적인 웹 어플리케이션에서는 WAS에서 로깅을 따로 관리하고 있기 때문에 file 로 로깅을 할 필요는 없을것 같다.(일반 jar 형태에서는 파일 로깅이 필요 할수도&hellip;)
참고사이트  http://yookeun.github.io/java/2015/11/10/log4jtologback/ http://java.ihoney.pe.kr/397 https://logback.qos.ch/  ]]></description></item></channel></rss>