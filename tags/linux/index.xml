<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>linux - Tag - 👨‍💻꿈꾸는 태태태의 공간</title><link>https://taetaetae.github.io/tags/linux/</link><description>linux - Tag - 👨‍💻꿈꾸는 태태태의 공간</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 13 Oct 2019 15:46:12 +0000</lastBuildDate><atom:link href="https://taetaetae.github.io/tags/linux/" rel="self" type="application/rss+xml"/><item><title>더이상 기다리지 않아도 되는 배치 무중단 배포</title><link>https://taetaetae.github.io/2019/10/13/batch-nondisruptive-deploy/</link><pubDate>Sun, 13 Oct 2019 15:46:12 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2019/10/13/batch-nondisruptive-deploy/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/batch-nondisruptive-deploy/wait_illustration.jpg" referrerpolicy="no-referrer">
&lt;/div>지난 포스팅, 그러니까 우아한 형제들에서 초대를 받아 Spring batch 에 대한 테크세미나에 다녀 왔다. 그 중 가장 인상깊었던 부분이 바로 무중단 배포. 차일피일 미루다 필자가 속한 팀에서도 배포때마다 가장 불편을 느끼고 있었던 부분이었기도 했고, 그런가보다 하며 개념만 알고 넘어가기엔 무언가 양심에 찔려 직접 무중단 배포를 할 수 있도록 구성을 해보고 테스트까지 해보고자 한다.
상황 및 문제점 리눅스 서버에 Jenkins가 설치되어 있고, Spring batch 모듈을 실행시키고 있다. 수동으로 실행을 하거나, Jenkins RestApi를 이용해서 실행을 할 수 있지만 주로 정해진 시간 즉, 스케쥴링에 의해 실행되곤 한다.</description></item><item><title>linux(centOS)에서 selenium 설정하기 (feat. python)</title><link>https://taetaetae.github.io/2018/02/01/linux-selenium/</link><pubDate>Thu, 01 Feb 2018 14:52:10 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2018/02/01/linux-selenium/</guid><description>테스트 코드로 안되는 실제 브라우저단 사용성 테스트를 하고싶은 경우가 있다. 이를테면 화면이 뜨고, 어떤 버튼을 누르면, 어떤 결과가 나와야 하는 일련의 Regression Test. 이때 활용할수 있는게 다양한 도구가 있지만 이번엔 selenium 에 대해서 알아보고자 한다.처음부터 사실 web application 테스트를 하려고 selenium 를 알아보게 된건 아니고, 내가 참여하고 있는 특정 밴드(네이버 BAND)에서 일주일에 한번씩 동일한 형태의 글을 올리고 있는데 (일종의 한주 출석체크 같은&amp;hellip;) 이를 자동화 해볼순 없을까 하며 밴드 API를 찾아보다 selenium 라는것을 알게되었고, 매크로처럼 어떤버튼 누르고 그다음 어떤버튼 누르고 하는 일련의 과정을 코드로 구성할수 있다는 점에 감동을 받아(?</description></item><item><title>리눅스상에서 json 파싱</title><link>https://taetaetae.github.io/2017/02/28/shell-script-json/</link><pubDate>Tue, 28 Feb 2017 17:50:44 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/02/28/shell-script-json/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/shell-script-json/jq.png" referrerpolicy="no-referrer">
            </div>리눅스 상에서 json형태의 String 을 파싱해야하는 상황이라면 아래 라이브러리를 사용해보는것을 추천해본다.
jq 사용방법은 너무너무 간단하다.
 자신의 시스템에 맞는 라이브러리를 다운받고  (32-bit system) $ wget http://stedolan.github.io/jq/download/linux32/jq (64-bit system) $ wget http://stedolan.github.io/jq/download/linux64/jq  실행 권한을 설정해 준 뒤  chmod +x ./jq  root 권한으로 해당 파일을 이동시킨다.  sudo cp jq /usr/bin  실행은 다음과 같이 한다. Json String 이 아래와 같이 있다고 가정했을때  { &#34;name&#34;: &#34;Google&#34;, &#34;location&#34;: { &#34;street&#34;: &#34;1600 Amphitheatre Parkway&#34;, &#34;city&#34;: &#34;Mountain View&#34;, &#34;state&#34;: &#34;California&#34;, &#34;country&#34;: &#34;US&#34; }, &#34;employees&#34;: [ { &#34;name&#34;: &#34;Michael&#34;, &#34;division&#34;: &#34;Engineering&#34; }, { &#34;name&#34;: &#34;Laura&#34;, &#34;division&#34;: &#34;HR&#34; }, { &#34;name&#34;: &#34;Elise&#34;, &#34;division&#34;: &#34;Marketing&#34; } ] } 실제 사용과 결과는 다음과 같이 이루어 진다.]]></description></item></channel></rss>