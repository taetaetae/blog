<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>archives-2017 - Tag - 👨‍💻꿈꾸는 태태태의 공간</title><link>https://taetaetae.github.io/tags/archives-2017/</link><description>archives-2017 - Tag - 👨‍💻꿈꾸는 태태태의 공간</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 14 Dec 2017 12:02:45 +0000</lastBuildDate><atom:link href="https://taetaetae.github.io/tags/archives-2017/" rel="self" type="application/rss+xml"/><item><title>Elastic{ON}Tour</title><link>https://taetaetae.github.io/2017/12/14/elastic-on-tour/</link><pubDate>Thu, 14 Dec 2017 12:02:45 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/12/14/elastic-on-tour/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/elastic-on-tour/ElasticStackWorkshop.jpg" referrerpolicy="no-referrer">
&lt;/div>작년에 팀을 옮기면서 로깅에 대해서 관심을 갖기 시작 하였고 찾아보다 ElasticStack 이 적합하다고 판단, 팀 내에서 나홀로 삽질해가며 지금의 로그 모니터링 시스템을 구축하였다. 그에 ElasticStack 에 관심을 갖던 찰나 지난 화요일(12월 12일)에 있었던 Elastic On Tour에 참석을 하였고 다양한 기술적 인사이트를 얻을수 있었는데 그 감동(?)을 잃기 싫어 정리해보고자 한다.
Registration + Partner Showcase 코엑스 인터컨티넨탈 호텔에서 진행되었다. 역시 외국계 기업이여서 그런지 행사 규모가 어마어마 했다. 이정표를 따라 지하로 가서 등록을 하고, ElasticStack 을 이용해서 서비스를 하고 있는 파트너사들의 부스를 기웃거리며 ElasticStack의 저력(?</description></item><item><title>What is Kafka?</title><link>https://taetaetae.github.io/2017/11/02/what-is-kafka/</link><pubDate>Thu, 02 Nov 2017 21:30:13 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/11/02/what-is-kafka/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/what-is-kafka/kafka.png" referrerpolicy="no-referrer">
&lt;/div>필자가 맡고있는 서비스에 Elastic Stack 을 도입하면서 중간에 버퍼가 필요하여 Message-Queue 시스템들을 알아보던 중 Kafka 에 대해 알아보고, 정리를 해보게 된다.
기본설명 및 기존 메세징 시스템과 다른점 메세징 큐의 일종 말 그대로 분산형 스트리밍 플랫폼, LinkedIn에서 여러 구직 + 채용 정보들을 한곳에서 처리(발행/구독)할수 있는 플랫폼으로 개발이 시작 대용량의 실시간 로그 처리에 특화되어 설계된 메시징 시스템, 기존 범용 메시징 시스템대비 TPS가 매우 우수 메시지를 기본적으로 메모리에 저장하는 기존 메시징 시스템과는 달리 메시지를 파일 시스템에 저장 → 카프카 재시작으로 인한 메세지 유실 우려 감소 기존의 메시징 시스템에서는 broker가 consumer에게 메시지를 push해 주는 방식인데 반해, Kafka는 consumer가 broker로부터 직접 메시지를 가지고 가는 pull 방식으로 동작하기 때문에 consumer는 자신의 처리능력만큼의 메시지만 broker로부터 가져오기 때문에 최적의 성능을 낼 수 있다.</description></item><item><title>Deview-2017 Day1 리뷰</title><link>https://taetaetae.github.io/2017/10/16/deview-2017-review/</link><pubDate>Mon, 16 Oct 2017 17:29:55 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/10/16/deview-2017-review/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/deview-2017-review/deview_main.jpg" referrerpolicy="no-referrer">
            </div>벌써 10번째 Naver에서 주최하는 Deview. 올해도 어김없이 참석을 하게 되었고, 이번엔 보고 듣고 느꼈던 부분들을 조금이라도 간직하고 싶은 마음에 바로 블로깅을 하려고 한다. (오랜만에 블로깅이긴 하지만&hellip;)항상 Deview에 올때마다 느끼는 부분인데 이번참석이 3번째 되는듯 하다 세상은 좁고 능력자는 많으며 내가 한번쯤 본것들은 이미 지나간 기술들이라는것, 더불어 단상위에 올라가 발표하는 사람들도 예전엔 나와 똑같이 발표를 듣는 일반 사람이였다는것. 이번에도 많은 생각을 하게 되었다. 구구절절 개인적으로 느낀점을 적는것에 앞서 강한 기억이 남았던 몇몇 세션들에 대해서 간략하게 리뷰를 먼저 하는게 맞는 순서같다.]]></description></item><item><title>Apache keepAlive</title><link>https://taetaetae.github.io/2017/08/28/apache-keep-alive/</link><pubDate>Mon, 28 Aug 2017 19:56:40 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/08/28/apache-keep-alive/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/apache-keep-alive/keepalive_on_off.png" referrerpolicy="no-referrer">
            </div><p>서버를 운영하다보면 간혹 문제가 발생하곤 한다. 이를테면 메모리가 다른이유없이 올라간다거나, 사용자 입장에서 응답속도가 간헐적으로 느린다거나. 그럴때마다 선배개발자분들께서 가장먼저 입에 오르내리는 단어. <code>keepAlive</code>.</p>]]></description></item><item><title>hexo 블로그에 tranquilpeak 테마 적용하기</title><link>https://taetaetae.github.io/2017/08/27/hexo-themes-tranquilpeak/</link><pubDate>Sun, 27 Aug 2017 17:52:56 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/08/27/hexo-themes-tranquilpeak/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/hexo-themes-tranquilpeak/1.jpg" referrerpolicy="no-referrer">
            </div>여러가지 hexo 테마중에 그나마(?) 영어로 된 문서가 있어서 적용해보게 된 tranquilpeak 라는 테마. 오늘은 해당 테마를 적용하면서 겪은 문제, 그리고 적용 방법에 대해서 간략하게나마 정리해보고자 한다. (다른 테마들은 거의다 중국쪽이나 일본&hellip;)먼저 hexo 공식사이트에서 알려주는 테마들은 다음 사이트에서 확인해 볼수 있다.
 https://hexo.io/themes/index.html  기존에는 hueman이라는 테마를 사용하고 있었는데 (링크), 오랜만에 블로그를 다시(?) 시작하는 느낌을 내보고 싶었고 보다 더 심플하고 유행에 안탈것 같은(순전히 필자 생각) 테마를 찾아보다 tranquilpeak이라는 테마를 선택하게 되었다.]]></description></item><item><title>다시 시작하자</title><link>https://taetaetae.github.io/2017/07/09/refresh/</link><pubDate>Sun, 09 Jul 2017 17:16:23 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/07/09/refresh/</guid><description>마지막 포스팅을 한지 벌써 3개월이 지났다. 그렇게 바빴던것도 아니고 블로그포스팅을 할 시간이 안난것도 아닌데 어느덧 다시 정신차리고 블로그를 포스팅 하려고보니 3개월이라는 시간이 흘러버렸네챗바퀴같은 일상, 느즈막히 일어나서 회사출근하고 정신없이 일하다가 퇴근, 그리고 늦게까지 잠못이루다 또 다음날이면 느즈막히 일어나고&amp;hellip; 뭔가 변화가 필요하다.
매일 일기쓰기 : 일기라고 해봤자 거창한건 아니고 딱 3개월만 써보자. 오늘 뭐했는지. 자기전에 딱 10분이면 좋을듯 아침에 일찍 일어나기 : 월수금 수영에 화목 배드민턴. 주말에도 일찍일어나고. 일찍일어나면 먹이도 더 먹는다고 하지 않았던가 달력활용하기 : 운동하는것도 그렇지만, 달력을 자주 보면서 빼먹지 말아야 할 중요한 날들은 반드시 메모하고 기억하자 기타 : 책좀 많이 읽고 운동도 꾸준히 해야겠다.</description></item><item><title>mybatis insert/update 쿼리실행후 결과 가져오기</title><link>https://taetaetae.github.io/2017/04/04/mybatis-usegeneratedkeys/</link><pubDate>Tue, 04 Apr 2017 11:41:28 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/04/04/mybatis-usegeneratedkeys/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/mybatis-useGeneratedKeys/mybatis.png" referrerpolicy="no-referrer">
&lt;/div>Select문이 아닌 다른 SQL Query(insert, update 등) 를 실행하고서 결과를 봐야하는 상황이 생긴다. 정확히 잘 수행되었나에 대한 확인. 어떻게 쿼리가 잘 수행되었나를 확인하는 방법은 다음과 같다. ※ 참고 url : http://www.mybatis.org/mybatis-3/ko/sqlmap-xml.html
useGeneratedKeys, keyProperty 옵션 사용하는 데이터베이스가 자동생성키를 지원한다면(mySql 같은) 해당옵션을 이용해 결과를 리턴 받을수 있다. 예로들어 파라미터로 아래 모델객체를 넘긴다고 가정하고
public Student { int id; String name; String email; Date regist_date; } 아래 mybatis 구문으로 insert를 시도하게되면, 파라미터로 넘긴 Student 객체의 id값에 insert 했을때의 key값(id)이 들어오게 된다.</description></item><item><title>Oracle + Mybatis 환경에서의 Date 다루기</title><link>https://taetaetae.github.io/2017/03/23/oracle-mybatis-date/</link><pubDate>Thu, 23 Mar 2017 11:16:05 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/03/23/oracle-mybatis-date/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/oracle-mybatis-date/oracle_mybatis_date.png" referrerpolicy="no-referrer">
            </div>상황  Oracle, Java 8, mybatis3 환경 Date컬럼에 데이터가 있는데 이를 select query로 조회하여 Model에 바인딩 시키고자 함.   쿼리에 아무 기능을 추가하지 않고 Date 형태로 Model에 바인딩을 하면 시분초가 없어진 2017-01-01 00:00:00 형태로 남게됨 그래서 아래처럼 쿼리 작성할 때마다 TO_CHAR를 사용해서 포맷에 맞추어 형변환을 시키고 Date 또는 String으로 Model에 바인딩 하곤 했음.  SELECT TO_CHAR(reg_ymdt, &#39;YYYY-MM-DD HH24:MI:SS&#39;) AS registDate FROM ...  이렇게 하다보니 query 만들때마다 형변환하는 쿼리를 만들어줘야하고, 자칫 포맷형식을 다르게 적으면 엉뚱한 결과를 초래하거나, Date형을 그대로 받아 사용해야하는 상황에서는 다시 형변환하는 과정(String to Date)을 해줘야만 함.]]></description></item><item><title>스프링환경에서의 파라미터 관련 정리</title><link>https://taetaetae.github.io/2017/03/12/spring-parameter/</link><pubDate>Sun, 12 Mar 2017 18:03:01 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/03/12/spring-parameter/</guid><description><![CDATA[<div class="featured-image">
                <img src="/images/spring-parameter/spring-parameter-1.jpg" referrerpolicy="no-referrer">
            </div>일반적인 웹 프로젝트 구성에서는 Controller레벨에서 응답을 받고 비지니스 로직을 처리 후에 다시 View레벨로 넘어가는게 통상적인 흐름이다. 이 부분에서 파라미터 관련한 여러가지 부분에 대해 정리해보고자 한다.
httpServletRequest.getParameter() 아래소스처럼 HttpServletRequest의 getParameter() 메서드를 이용하여 파라미터값을 가져올 수 있다.
@RequestMapping(&#34;/&#34;) public String home(HttpServletRequest httpServletRequest) { String id = httpServletRequest.getParameter(&#34;id&#34;); return &#34;home&#34;; } @RequestParam 또다른 방법으로는 @RequestParam 어노테이션을 이용하면 간단하게 파라미터값을 가져올수 있다. 우선, 해당 어노테이션의 옵션값들에 대해 간략하게 확인하고 넘어가는게 좋을듯 싶다. API문서 4.3.6 기준]]></description></item><item><title>벌써 3월, 다시 일어서야할 때</title><link>https://taetaetae.github.io/2017/03/08/a-quarter-of-this-year/</link><pubDate>Wed, 08 Mar 2017 13:44:21 +0000</pubDate><author>Author</author><guid>https://taetaetae.github.io/2017/03/08/a-quarter-of-this-year/</guid><description>&lt;div class="featured-image">
&lt;img src="/images/a-quarter-of-this-year/time.png" referrerpolicy="no-referrer">
&lt;/div>벌써 3월이다. 뭐하나 제대로 한것도 없는데 시간은 야속하게도 멈추지 않고 지나가고 있다. 오랜만에 동기형을 만났다. 신입사원이 되기 전 연습생(?)시절 동거동락하며 개발에 대해 고군분투 하던 사이인지라. 오랜만에 만나도 서로 이야기 하고자 하는 주제는 언제나 동일하다. 개발자로서의 삶 이런저런 이야기를 하며 다시 나를 돌아보게 되었다. 내 노력에 의해, 아니면 운이 좋아 지금 다니고있는 회사에 들어온 이후로 예전만큼의 열정은 온데간데 없으며, 그만큼 간절하지도 않고 치열하지도 않는 내 자신이 너무 미안하고 쪽팔릴정도로 한심하기 그지 없었다.</description></item></channel></rss>